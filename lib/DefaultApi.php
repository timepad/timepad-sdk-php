<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace TimepadApi;

class DefaultApi {

  function __construct($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * introspectToken
   *
   * Получить информацию о пользователе API
   *
   * @param string $token Идентификатор токена (required)
   * @return Introspect
   */
   public function introspectToken($token) {

      // parse inputs
      $resourcePath = "/introspect";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($token !== null) {
        $queryParams['token'] = $this->apiClient->toQueryValue($token);
      }
      
      
      
      
      
      $preparedBody = $formParams;
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Introspect');
  		return $responseObject;
  }
  
  /**
   * introspectTokenPost
   *
   * Получить информацию о пользователе API
   *
   * @param string $token Идентификатор токена (required)
   * @return Introspect
   */
   public function introspectTokenPost($token) {

      // parse inputs
      $resourcePath = "/introspect";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      
      
      
      // form params
      if ($token !== null) {
        $formParams['token'] = $this->apiClient->toFormValue($token);
      }
      
      
      $preparedBody = $formParams;
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Introspect');
  		return $responseObject;
  }
  
  /**
   * authorize
   *
   * Получить токен для работы с API, требующими авторизации
   *
   * @param string $client_id Идентификатор клиента (required)
   * @param string $redirect_uri Ссылка на которую произойдёт редирект (required)
   * @param string $response_type Возвращаемый тип ответа. Единственное поддерживаемое значение - token (required)
   * @param array[string] $scope Запрашиваемые приложением разрешения через запятую. Возможные значения: view_private_events (required)
   * @return void
   */
   public function authorize($client_id, $redirect_uri, $response_type, $scope) {

      // parse inputs
      $resourcePath = "/oauth/authorize";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($client_id !== null) {
        $queryParams['client_id'] = $this->apiClient->toQueryValue($client_id);
      }// query params
      if($redirect_uri !== null) {
        $queryParams['redirect_uri'] = $this->apiClient->toQueryValue($redirect_uri);
      }// query params
      if($response_type !== null) {
        $queryParams['response_type'] = $this->apiClient->toQueryValue($response_type);
      }// query params
      if($scope !== null) {
        $queryParams['scope'] = $this->apiClient->toQueryValue($scope);
      }
      
      
      
      
      
      $preparedBody = $formParams;
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      
  }
  
  /**
   * getEvents
   *
   * Получить список событий по заданным фильтрам
   *
   * @param array[string] $fields Список полей, которые нужно вывести (required)
   * @param int $limit Сколько элементов списка вывести (required)
   * @param int $skip С какого элемента списка начать вывод (required)
   * @param array[string] $sort Поле, по которому сортировать (required)
   * @param array[int] $category_ids Категории, к которым принадлежат события (required)
   * @param array[int] $category_ids_exclude Категории, к которым не принадлежат события (required)
   * @param array[string] $cities Города, события из которых выводить (required)
   * @param array[string] $cities_exclude Города, события из которых не выводить (required)
   * @param array[int] $organization_ids Номера организаций, события из которых выводить (required)
   * @param array[int] $organization_ids_exclude Номера организаций, события из которых не выводить (required)
   * @param array[int] $event_ids Номера событий, которые нужно вывести (required)
   * @param array[int] $event_ids_exclude Номера событий, которые нужно пропустить (required)
   * @param array[string] $keywords Слова, которые должны быть в названии или описании события (required)
   * @param array[string] $keywords_exclude Слова, которых не должно быть в названии или описании события (required)
   * @param array[string] $access_statuses Список режимов доступа, в которых находятся события. Возможные значения: private, draft, link_only, public. Доступно только организаторам (required)
   * @param array[string] $moderation_statuses Список уровней качества, установленных для события модератором. Возможные значения: featured, shown, hidden, not_moderated. (required)
   * @param int $price_min Цена, выше которой должен стоить хотя бы один билет события (required)
   * @param int $price_max Цена, ниже которой должен стоить хотя бы один билет события (required)
   * @param int $ad_partner_percent_min Хотя бы у одного вида билета события партнёрская комиссия в процентах выше этого значения (required)
   * @param int $ad_partner_percent_max Хотя бы у одного вида билета партнёрская комиссия в процентах ниже этого значения (required)
   * @param int $ad_partner_profit_min Хотя бы у одного вида билета партнёрская комиссия в рублях выше этого значения (required)
   * @param int $ad_partner_profit_max Хотя бы у одного вида билета партнёрская комиссия в рублях ниже этого значения (required)
   * @param DateTime $starts_at_min Дата начала события позднее этого значения (required)
   * @param DateTime $starts_at_max Дата начала события раньше этого значения (required)
   * @param DateTime $created_at_min Дата создания события на Timepad позднее этого значения (required)
   * @param DateTime $created_at_max Дата создания события на Timepad раньше этого значения (required)
   * @return EventsResponse
   */
   public function getEvents($fields, $limit, $skip, $sort, $category_ids, $category_ids_exclude, $cities, $cities_exclude, $organization_ids, $organization_ids_exclude, $event_ids, $event_ids_exclude, $keywords, $keywords_exclude, $access_statuses, $moderation_statuses, $price_min, $price_max, $ad_partner_percent_min, $ad_partner_percent_max, $ad_partner_profit_min, $ad_partner_profit_max, $starts_at_min, $starts_at_max, $created_at_min, $created_at_max) {

      // parse inputs
      $resourcePath = "/v1/events";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($fields !== null) {
        $queryParams['fields'] = $this->apiClient->toQueryValue($fields);
      }// query params
      if($limit !== null) {
        $queryParams['limit'] = $this->apiClient->toQueryValue($limit);
      }// query params
      if($skip !== null) {
        $queryParams['skip'] = $this->apiClient->toQueryValue($skip);
      }// query params
      if($sort !== null) {
        $queryParams['sort'] = $this->apiClient->toQueryValue($sort);
      }// query params
      if($category_ids !== null) {
        $queryParams['category_ids'] = $this->apiClient->toQueryValue($category_ids);
      }// query params
      if($category_ids_exclude !== null) {
        $queryParams['category_ids_exclude'] = $this->apiClient->toQueryValue($category_ids_exclude);
      }// query params
      if($cities !== null) {
        $queryParams['cities'] = $this->apiClient->toQueryValue($cities);
      }// query params
      if($cities_exclude !== null) {
        $queryParams['cities_exclude'] = $this->apiClient->toQueryValue($cities_exclude);
      }// query params
      if($organization_ids !== null) {
        $queryParams['organization_ids'] = $this->apiClient->toQueryValue($organization_ids);
      }// query params
      if($organization_ids_exclude !== null) {
        $queryParams['organization_ids_exclude'] = $this->apiClient->toQueryValue($organization_ids_exclude);
      }// query params
      if($event_ids !== null) {
        $queryParams['event_ids'] = $this->apiClient->toQueryValue($event_ids);
      }// query params
      if($event_ids_exclude !== null) {
        $queryParams['event_ids_exclude'] = $this->apiClient->toQueryValue($event_ids_exclude);
      }// query params
      if($keywords !== null) {
        $queryParams['keywords'] = $this->apiClient->toQueryValue($keywords);
      }// query params
      if($keywords_exclude !== null) {
        $queryParams['keywords_exclude'] = $this->apiClient->toQueryValue($keywords_exclude);
      }// query params
      if($access_statuses !== null) {
        $queryParams['access_statuses'] = $this->apiClient->toQueryValue($access_statuses);
      }// query params
      if($moderation_statuses !== null) {
        $queryParams['moderation_statuses'] = $this->apiClient->toQueryValue($moderation_statuses);
      }// query params
      if($price_min !== null) {
        $queryParams['price_min'] = $this->apiClient->toQueryValue($price_min);
      }// query params
      if($price_max !== null) {
        $queryParams['price_max'] = $this->apiClient->toQueryValue($price_max);
      }// query params
      if($ad_partner_percent_min !== null) {
        $queryParams['ad_partner_percent_min'] = $this->apiClient->toQueryValue($ad_partner_percent_min);
      }// query params
      if($ad_partner_percent_max !== null) {
        $queryParams['ad_partner_percent_max'] = $this->apiClient->toQueryValue($ad_partner_percent_max);
      }// query params
      if($ad_partner_profit_min !== null) {
        $queryParams['ad_partner_profit_min'] = $this->apiClient->toQueryValue($ad_partner_profit_min);
      }// query params
      if($ad_partner_profit_max !== null) {
        $queryParams['ad_partner_profit_max'] = $this->apiClient->toQueryValue($ad_partner_profit_max);
      }// query params
      if($starts_at_min !== null) {
        $queryParams['starts_at_min'] = $this->apiClient->toQueryValue($starts_at_min);
      }// query params
      if($starts_at_max !== null) {
        $queryParams['starts_at_max'] = $this->apiClient->toQueryValue($starts_at_max);
      }// query params
      if($created_at_min !== null) {
        $queryParams['created_at_min'] = $this->apiClient->toQueryValue($created_at_min);
      }// query params
      if($created_at_max !== null) {
        $queryParams['created_at_max'] = $this->apiClient->toQueryValue($created_at_max);
      }
      
      
      
      
      
      $preparedBody = $formParams;
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'EventsResponse');
  		return $responseObject;
  }
  
  /**
   * addEvent
   *
   * Создать событие
   *
   * @param CreateEvent $body Описание создаваемого события (required)
   * @return EventResponse
   */
   public function addEvent($body) {

      // parse inputs
      $resourcePath = "/v1/events";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      
      
      
      
      // body params
      $preparedBody = null;
      if (isset($body)) {
        $preparedBody = $body;
      }
      // for HTTP post (form)
      $preparedBody = $preparedBody ?: $formParams;
      
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'EventResponse');
  		return $responseObject;
  }
  
  /**
   * getSingleEvent
   *
   * Получить событие по данному id
   *
   * @param array[string] $fields Список полей, которые нужно вывести (required)
   * @param int $event_id Номер событий, которые нужно вывести (required)
   * @return EventResponse
   */
   public function getSingleEvent($fields, $event_id) {

      // parse inputs
      $resourcePath = "/v1/events/{event_id}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($fields !== null) {
        $queryParams['fields'] = $this->apiClient->toQueryValue($fields);
      }
      
      // path params
      if($event_id !== null) {
        $resourcePath = str_replace("{" . "event_id" . "}",
                                    $this->apiClient->toPathValue($event_id), $resourcePath);
      }
      
      
      
      $preparedBody = $formParams;
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'EventResponse');
  		return $responseObject;
  }
  
  /**
   * editEvent
   *
   * Редактировать событие
   *
   * @param int $event_id Id редактируемого события (required)
   * @param EditEvent $body Список изменённых параметров события (required)
   * @return EventResponse
   */
   public function editEvent($event_id, $body) {

      // parse inputs
      $resourcePath = "/v1/events/{event_id}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      
      
      // path params
      if($event_id !== null) {
        $resourcePath = str_replace("{" . "event_id" . "}",
                                    $this->apiClient->toPathValue($event_id), $resourcePath);
      }
      
      // body params
      $preparedBody = null;
      if (isset($body)) {
        $preparedBody = $body;
      }
      // for HTTP post (form)
      $preparedBody = $preparedBody ?: $formParams;
      
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'EventResponse');
  		return $responseObject;
  }
  
  /**
   * getEventOrders
   *
   * Получить заказы события с указанным номером
   *
   * @param int $limit Сколько элементов списка вывести (required)
   * @param int $skip С какого элемента списка начать вывод (required)
   * @param array[string] $fields Список полей, которые нужно вывести (required)
   * @param int $event_id Номер события, к которому относятся заказы (required)
   * @return RegistrationOrdersResponse
   */
   public function getEventOrders($limit, $skip, $fields, $event_id) {

      // parse inputs
      $resourcePath = "/v1/events/{event_id}/orders";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($limit !== null) {
        $queryParams['limit'] = $this->apiClient->toQueryValue($limit);
      }// query params
      if($skip !== null) {
        $queryParams['skip'] = $this->apiClient->toQueryValue($skip);
      }// query params
      if($fields !== null) {
        $queryParams['fields'] = $this->apiClient->toQueryValue($fields);
      }
      
      // path params
      if($event_id !== null) {
        $resourcePath = str_replace("{" . "event_id" . "}",
                                    $this->apiClient->toPathValue($event_id), $resourcePath);
      }
      
      
      
      $preparedBody = $formParams;
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'RegistrationOrdersResponse');
  		return $responseObject;
  }
  
  /**
   * addOrder
   *
   * Создать заказ
   *
   * @param int $event_id Номер события (required)
   * @param CreateOrder $body Описание создаваемого заказа (required)
   * @return RegistrationOrderResponse
   */
   public function addOrder($event_id, $body) {

      // parse inputs
      $resourcePath = "/v1/events/{event_id}/orders";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      
      
      // path params
      if($event_id !== null) {
        $resourcePath = str_replace("{" . "event_id" . "}",
                                    $this->apiClient->toPathValue($event_id), $resourcePath);
      }
      
      // body params
      $preparedBody = null;
      if (isset($body)) {
        $preparedBody = $body;
      }
      // for HTTP post (form)
      $preparedBody = $preparedBody ?: $formParams;
      
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'RegistrationOrderResponse');
  		return $responseObject;
  }
  
  /**
   * getSingleEventOrder
   *
   * Получить заказ с указанным id
   *
   * @param array[string] $fields Список полей, которые нужно вывести (required)
   * @param int $event_id Номер события, к которому относится заказ (required)
   * @param int $order_id Номер заказа (required)
   * @return RegistrationOrderResponse
   */
   public function getSingleEventOrder($fields, $event_id, $order_id) {

      // parse inputs
      $resourcePath = "/v1/events/{event_id}/orders/{order_id}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($fields !== null) {
        $queryParams['fields'] = $this->apiClient->toQueryValue($fields);
      }
      
      // path params
      if($event_id !== null) {
        $resourcePath = str_replace("{" . "event_id" . "}",
                                    $this->apiClient->toPathValue($event_id), $resourcePath);
      }// path params
      if($order_id !== null) {
        $resourcePath = str_replace("{" . "order_id" . "}",
                                    $this->apiClient->toPathValue($order_id), $resourcePath);
      }
      
      
      
      $preparedBody = $formParams;
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'RegistrationOrderResponse');
  		return $responseObject;
  }
  
  /**
   * editEventOrder
   *
   * Отредактировать заказ с указанным id
   *
   * @param int $event_id Номер события, к которому относится заказ (required)
   * @param int $order_id Номер заказа (required)
   * @param EditOrder $body Список изменённых параметров заказа (required)
   * @return RegistrationOrderResponse
   */
   public function editEventOrder($event_id, $order_id, $body) {

      // parse inputs
      $resourcePath = "/v1/events/{event_id}/orders/{order_id}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "PATCH";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      
      
      // path params
      if($event_id !== null) {
        $resourcePath = str_replace("{" . "event_id" . "}",
                                    $this->apiClient->toPathValue($event_id), $resourcePath);
      }// path params
      if($order_id !== null) {
        $resourcePath = str_replace("{" . "order_id" . "}",
                                    $this->apiClient->toPathValue($order_id), $resourcePath);
      }
      
      // body params
      $preparedBody = null;
      if (isset($body)) {
        $preparedBody = $body;
      }
      // for HTTP post (form)
      $preparedBody = $preparedBody ?: $formParams;
      
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'RegistrationOrderResponse');
  		return $responseObject;
  }
  
  /**
   * addOrganization
   *
   * Создать новую организацию
   *
   * @param CreateOrganization $body Список полей, которые нужно вывести (required)
   * @return OrganizationResponse
   */
   public function addOrganization($body) {

      // parse inputs
      $resourcePath = "/v1/organizations";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      
      
      
      
      // body params
      $preparedBody = null;
      if (isset($body)) {
        $preparedBody = $body;
      }
      // for HTTP post (form)
      $preparedBody = $preparedBody ?: $formParams;
      
      

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $preparedBody = http_build_query($preparedBody);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $preparedBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'OrganizationResponse');
  		return $responseObject;
  }
  

}
