<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace TimepadApi;

class DefaultApi {

    function __construct($apiClient) {
        $this->apiClient = $apiClient;
    }

    
    /**
     * introspectToken
     *
     * Получить информацию о пользователе API
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'token' (string) Идентификатор токена (optional)
     *
     * @return models\Introspect
     */
    public function introspectToken($params = []) {
        $resourcePath = "/introspect";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params
        if (isset($params['token'])) {
            $queryParams['token'] = $this->apiClient->toQueryValue($params['token']);
        }

        // header params

        // path params

        // form params

        // body params
        $preparedBody = $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'Introspect');
        return $responseObject;
    }
   
    /**
     * introspectTokenPost
     *
     * Получить информацию о пользователе API
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'token' (string) Идентификатор токена (optional)
     *
     * @return models\Introspect
     */
    public function introspectTokenPost($params = []) {
        $resourcePath = "/introspect";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params

        // header params

        // path params

        // form params
        if (isset($params['token'])) {
            $formParams['token'] = $this->apiClient->toFormValue($params['token']);
        }

        // body params
        $preparedBody = $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'Introspect');
        return $responseObject;
    }
   
    /**
     * authorize
     *
     * Получить токен для работы с API, требующими авторизации
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'client_id' (string) Идентификатор клиента (optional)
     * 'redirect_uri' (string) Ссылка на которую произойдёт редирект (optional)
     * 'response_type' (string) Возвращаемый тип ответа. Единственное поддерживаемое значение - token (optional)
     * 'scope' (string[]) Запрашиваемые приложением разрешения через запятую. Возможные значения: add_events, add_organizations, edit_events, view_private_events, view_visitors, edit_visitors, add_cash_payments (optional)
     *
     * @return void
     */
    public function authorize($params = []) {
        $resourcePath = "/oauth/authorize";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params
        if (isset($params['client_id'])) {
            $queryParams['client_id'] = $this->apiClient->toQueryValue($params['client_id']);
        }
        if (isset($params['redirect_uri'])) {
            $queryParams['redirect_uri'] = $this->apiClient->toQueryValue($params['redirect_uri']);
        }
        if (isset($params['response_type'])) {
            $queryParams['response_type'] = $this->apiClient->toQueryValue($params['response_type']);
        }
        if (isset($params['scope'])) {
            $queryParams['scope'] = $this->apiClient->toQueryValue($params['scope']);
        }

        // header params

        // path params

        // form params

        // body params
        $preparedBody = $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
    }
   
    /**
     * getEvents
     *
     * Получить список событий по заданным фильтрам
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'fields' (string[]) Список полей, которые нужно вывести (optional)
     * 'limit' (int) Сколько элементов списка вывести (optional)
     * 'skip' (int) С какого элемента списка начать вывод (optional)
     * 'sort' (string[]) Поле, по которому сортировать (optional)
     * 'category_ids' (int[]) Категории, к которым принадлежат события (optional)
     * 'category_ids_exclude' (int[]) Категории, к которым не принадлежат события (optional)
     * 'cities' (string[]) Города, события из которых выводить (optional)
     * 'cities_exclude' (string[]) Города, события из которых не выводить (optional)
     * 'organization_ids' (int[]) Номера организаций, события из которых выводить (optional)
     * 'organization_ids_exclude' (int[]) Номера организаций, события из которых не выводить (optional)
     * 'event_ids' (int[]) Номера событий, которые нужно вывести (optional)
     * 'event_ids_exclude' (int[]) Номера событий, которые нужно пропустить (optional)
     * 'keywords' (string[]) Слова, которые должны быть в названии или описании события (optional)
     * 'keywords_exclude' (string[]) Слова, которых не должно быть в названии или описании события (optional)
     * 'access_statuses' (string[]) Список режимов доступа, в которых находятся события. Возможные значения: private, draft, link_only, public. Доступно только организаторам (optional)
     * 'moderation_statuses' (string[]) Список уровней качества, установленных для события модератором. Возможные значения: featured, shown, hidden, not_moderated. (optional)
     * 'price_min' (int) Цена, выше которой должен стоить хотя бы один билет события (optional)
     * 'price_max' (int) Цена, ниже которой должен стоить хотя бы один билет события (optional)
     * 'ad_partner_percent_min' (int) Хотя бы у одного вида билета события партнёрская комиссия в процентах выше этого значения (optional)
     * 'ad_partner_percent_max' (int) Хотя бы у одного вида билета партнёрская комиссия в процентах ниже этого значения (optional)
     * 'ad_partner_profit_min' (int) Хотя бы у одного вида билета партнёрская комиссия в рублях выше этого значения (optional)
     * 'ad_partner_profit_max' (int) Хотя бы у одного вида билета партнёрская комиссия в рублях ниже этого значения (optional)
     * 'starts_at_min' (DateTime) Дата начала события позднее этого значения (optional)
     * 'starts_at_max' (DateTime) Дата начала события раньше этого значения (optional)
     * 'created_at_min' (DateTime) Дата создания события на Timepad позднее этого значения (optional)
     * 'created_at_max' (DateTime) Дата создания события на Timepad раньше этого значения (optional)
     *
     * @return models\EventsResponse
     */
    public function getEvents($params = []) {
        $resourcePath = "/v1/events";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params
        if (isset($params['fields'])) {
            $queryParams['fields'] = $this->apiClient->toQueryValue($params['fields']);
        }
        if (isset($params['limit'])) {
            $queryParams['limit'] = $this->apiClient->toQueryValue($params['limit']);
        }
        if (isset($params['skip'])) {
            $queryParams['skip'] = $this->apiClient->toQueryValue($params['skip']);
        }
        if (isset($params['sort'])) {
            $queryParams['sort'] = $this->apiClient->toQueryValue($params['sort']);
        }
        if (isset($params['category_ids'])) {
            $queryParams['category_ids'] = $this->apiClient->toQueryValue($params['category_ids']);
        }
        if (isset($params['category_ids_exclude'])) {
            $queryParams['category_ids_exclude'] = $this->apiClient->toQueryValue($params['category_ids_exclude']);
        }
        if (isset($params['cities'])) {
            $queryParams['cities'] = $this->apiClient->toQueryValue($params['cities']);
        }
        if (isset($params['cities_exclude'])) {
            $queryParams['cities_exclude'] = $this->apiClient->toQueryValue($params['cities_exclude']);
        }
        if (isset($params['organization_ids'])) {
            $queryParams['organization_ids'] = $this->apiClient->toQueryValue($params['organization_ids']);
        }
        if (isset($params['organization_ids_exclude'])) {
            $queryParams['organization_ids_exclude'] = $this->apiClient->toQueryValue($params['organization_ids_exclude']);
        }
        if (isset($params['event_ids'])) {
            $queryParams['event_ids'] = $this->apiClient->toQueryValue($params['event_ids']);
        }
        if (isset($params['event_ids_exclude'])) {
            $queryParams['event_ids_exclude'] = $this->apiClient->toQueryValue($params['event_ids_exclude']);
        }
        if (isset($params['keywords'])) {
            $queryParams['keywords'] = $this->apiClient->toQueryValue($params['keywords']);
        }
        if (isset($params['keywords_exclude'])) {
            $queryParams['keywords_exclude'] = $this->apiClient->toQueryValue($params['keywords_exclude']);
        }
        if (isset($params['access_statuses'])) {
            $queryParams['access_statuses'] = $this->apiClient->toQueryValue($params['access_statuses']);
        }
        if (isset($params['moderation_statuses'])) {
            $queryParams['moderation_statuses'] = $this->apiClient->toQueryValue($params['moderation_statuses']);
        }
        if (isset($params['price_min'])) {
            $queryParams['price_min'] = $this->apiClient->toQueryValue($params['price_min']);
        }
        if (isset($params['price_max'])) {
            $queryParams['price_max'] = $this->apiClient->toQueryValue($params['price_max']);
        }
        if (isset($params['ad_partner_percent_min'])) {
            $queryParams['ad_partner_percent_min'] = $this->apiClient->toQueryValue($params['ad_partner_percent_min']);
        }
        if (isset($params['ad_partner_percent_max'])) {
            $queryParams['ad_partner_percent_max'] = $this->apiClient->toQueryValue($params['ad_partner_percent_max']);
        }
        if (isset($params['ad_partner_profit_min'])) {
            $queryParams['ad_partner_profit_min'] = $this->apiClient->toQueryValue($params['ad_partner_profit_min']);
        }
        if (isset($params['ad_partner_profit_max'])) {
            $queryParams['ad_partner_profit_max'] = $this->apiClient->toQueryValue($params['ad_partner_profit_max']);
        }
        if (isset($params['starts_at_min'])) {
            $queryParams['starts_at_min'] = $this->apiClient->toQueryValue($params['starts_at_min']);
        }
        if (isset($params['starts_at_max'])) {
            $queryParams['starts_at_max'] = $this->apiClient->toQueryValue($params['starts_at_max']);
        }
        if (isset($params['created_at_min'])) {
            $queryParams['created_at_min'] = $this->apiClient->toQueryValue($params['created_at_min']);
        }
        if (isset($params['created_at_max'])) {
            $queryParams['created_at_max'] = $this->apiClient->toQueryValue($params['created_at_max']);
        }

        // header params

        // path params

        // form params

        // body params
        $preparedBody = $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'EventsResponse');
        return $responseObject;
    }
   
    /**
     * addEvent
     *
     * Создать событие
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'body' (CreateEvent) Описание создаваемого события (optional)
     *
     * @return models\EventResponse
     */
    public function addEvent($params = []) {
        $resourcePath = "/v1/events";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params

        // header params

        // path params

        // form params

        // body params
        $preparedBody = null;
        if (isset($params['body'])) {
            $preparedBody = $params['body'];
        }

        // for HTTP post (form)
        $preparedBody = $preparedBody ?: $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'EventResponse');
        return $responseObject;
    }
   
    /**
     * getSingleEvent
     *
     * Получить событие по данному id
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'fields' (string[]) Список полей, которые нужно вывести (optional)
     * 'event_id' (int) Номер событий, которые нужно вывести (required)
     *
     * @return models\EventResponse
     */
    public function getSingleEvent($params = []) {
        $resourcePath = "/v1/events/{event_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params
        if (isset($params['fields'])) {
            $queryParams['fields'] = $this->apiClient->toQueryValue($params['fields']);
        }

        // header params

        // path params
        if (isset($params['event_id'])) {
            $resourcePath = str_replace("{" . "event_id" . "}", $this->apiClient->toPathValue($params['event_id']), $resourcePath);
        }

        // form params

        // body params
        $preparedBody = $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'EventResponse');
        return $responseObject;
    }
   
    /**
     * editEvent
     *
     * Редактировать событие
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'event_id' (int) Id редактируемого события (required)
     * 'body' (EditEvent) Список изменённых параметров события (optional)
     *
     * @return models\EventResponse
     */
    public function editEvent($params = []) {
        $resourcePath = "/v1/events/{event_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params

        // header params

        // path params
        if (isset($params['event_id'])) {
            $resourcePath = str_replace("{" . "event_id" . "}", $this->apiClient->toPathValue($params['event_id']), $resourcePath);
        }

        // form params

        // body params
        $preparedBody = null;
        if (isset($params['body'])) {
            $preparedBody = $params['body'];
        }

        // for HTTP post (form)
        $preparedBody = $preparedBody ?: $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'EventResponse');
        return $responseObject;
    }
   
    /**
     * getEventOrders
     *
     * Получить заказы события с указанным номером
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'limit' (int) Сколько элементов списка вывести (optional)
     * 'skip' (int) С какого элемента списка начать вывод (optional)
     * 'fields' (string[]) Список полей, которые нужно вывести (optional)
     * 'event_id' (int) Номер события, к которому относятся заказы (required)
     *
     * @return models\RegistrationOrdersResponse
     */
    public function getEventOrders($params = []) {
        $resourcePath = "/v1/events/{event_id}/orders";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params
        if (isset($params['limit'])) {
            $queryParams['limit'] = $this->apiClient->toQueryValue($params['limit']);
        }
        if (isset($params['skip'])) {
            $queryParams['skip'] = $this->apiClient->toQueryValue($params['skip']);
        }
        if (isset($params['fields'])) {
            $queryParams['fields'] = $this->apiClient->toQueryValue($params['fields']);
        }

        // header params

        // path params
        if (isset($params['event_id'])) {
            $resourcePath = str_replace("{" . "event_id" . "}", $this->apiClient->toPathValue($params['event_id']), $resourcePath);
        }

        // form params

        // body params
        $preparedBody = $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'RegistrationOrdersResponse');
        return $responseObject;
    }
   
    /**
     * addOrder
     *
     * Создать заказ
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'event_id' (int) Номер события (required)
     * 'body' (CreateOrder) Описание создаваемого заказа (optional)
     *
     * @return models\RegistrationOrderResponse
     */
    public function addOrder($params = []) {
        $resourcePath = "/v1/events/{event_id}/orders";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params

        // header params

        // path params
        if (isset($params['event_id'])) {
            $resourcePath = str_replace("{" . "event_id" . "}", $this->apiClient->toPathValue($params['event_id']), $resourcePath);
        }

        // form params

        // body params
        $preparedBody = null;
        if (isset($params['body'])) {
            $preparedBody = $params['body'];
        }

        // for HTTP post (form)
        $preparedBody = $preparedBody ?: $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'RegistrationOrderResponse');
        return $responseObject;
    }
   
    /**
     * getSingleEventOrder
     *
     * Получить заказ с указанным id
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'fields' (string[]) Список полей, которые нужно вывести (optional)
     * 'event_id' (int) Номер события, к которому относится заказ (required)
     * 'order_id' (int) Номер заказа (required)
     *
     * @return models\RegistrationOrderResponse
     */
    public function getSingleEventOrder($params = []) {
        $resourcePath = "/v1/events/{event_id}/orders/{order_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params
        if (isset($params['fields'])) {
            $queryParams['fields'] = $this->apiClient->toQueryValue($params['fields']);
        }

        // header params

        // path params
        if (isset($params['event_id'])) {
            $resourcePath = str_replace("{" . "event_id" . "}", $this->apiClient->toPathValue($params['event_id']), $resourcePath);
        }
        if (isset($params['order_id'])) {
            $resourcePath = str_replace("{" . "order_id" . "}", $this->apiClient->toPathValue($params['order_id']), $resourcePath);
        }

        // form params

        // body params
        $preparedBody = $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'RegistrationOrderResponse');
        return $responseObject;
    }
   
    /**
     * editEventOrder
     *
     * Отредактировать заказ с указанным id
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'event_id' (int) Номер события, к которому относится заказ (required)
     * 'order_id' (int) Номер заказа (required)
     * 'body' (EditOrder) Список изменённых параметров заказа (optional)
     *
     * @return models\RegistrationOrderResponse
     */
    public function editEventOrder($params = []) {
        $resourcePath = "/v1/events/{event_id}/orders/{order_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PATCH";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params

        // header params

        // path params
        if (isset($params['event_id'])) {
            $resourcePath = str_replace("{" . "event_id" . "}", $this->apiClient->toPathValue($params['event_id']), $resourcePath);
        }
        if (isset($params['order_id'])) {
            $resourcePath = str_replace("{" . "order_id" . "}", $this->apiClient->toPathValue($params['order_id']), $resourcePath);
        }

        // form params

        // body params
        $preparedBody = null;
        if (isset($params['body'])) {
            $preparedBody = $params['body'];
        }

        // for HTTP post (form)
        $preparedBody = $preparedBody ?: $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'RegistrationOrderResponse');
        return $responseObject;
    }
   
    /**
     * addOrganization
     *
     * Создать новую организацию
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
     * 'body' (CreateOrganization) Список полей, которые нужно вывести (optional)
     *
     * @return models\OrganizationResponse
     */
    public function addOrganization($params = []) {
        $resourcePath = "/v1/organizations";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array();
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params

        // header params

        // path params

        // form params

        // body params
        $preparedBody = null;
        if (isset($params['body'])) {
            $preparedBody = $params['body'];
        }

        // for HTTP post (form)
        $preparedBody = $preparedBody ?: $formParams;
        

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'OrganizationResponse');
        return $responseObject;
    }
   

}
